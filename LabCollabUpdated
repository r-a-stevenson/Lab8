import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D

## Part 1

#* Set up loop and plot variables.
nstep = 300                             # Maximum number of iterations
nplots = 50                             # Number of snapshots (plots) to take
plot_step = int(nstep/nplots)           # Number of time steps between plots

# dftcs - Program to solve the diffusion equation using the Forward Time Centered Space (FTCS) scheme.

# The calling arguments for your function should be as follows:
def diffusion_ftcs(nspace, ntime, tau_rel, args):
    """
    nspace: number of spatial grid points
    ntime: number of timesteps to compute
    tau_rel: time step in units of the critical time-step for stability
    args: list containing the problem parameters for thermal diffusion: the bar length (L) and the thermal diffusion coefficient (k)
    returns the temperature field T(x, t) as a 2-D array
    """

    L = args[0]
    h = L/(nspace-1)   # Grid size
    kappa = args[1]
    tsigma = h**2/(2*kappa)
    tau = tau_rel*tsigma
    
    if tau_rel < 1 :
        print('Solution is expected to be stable')
    else:
        print('WARNING: Solution is expected to be unstable')

    #* Set initial and boundary conditions.
    tt = np.zeros((nspace, ntime))                          # Initialize temperature to zero at all points
    tt[int(nspace/2)] = 1./h                                # Initial cond. is delta function in center

    #* Loop over the desired number of time steps.
    ttplot = np.empty((nspace, nplots))
    iplot = 0                                               # Counter used to count plots
    for istep in range(nstep):

        #* Compute new temperature using FTCS scheme.
        tt[1:(nspace-1)] = ( tt[1:(nspace-1)] + 
            kappa*tau/h**2*( tt[2:nspace] + tt[0:(nspace-2)] - 2*tt[1:(nspace-1)] ) )
    
        #* Periodically record temperature for plotting.
        if (istep+1) % plot_step < 1 :                      # Every plot_step steps
            ttplot[:,iplot] = np.copy(tt[:,plot_step])      # record tt(i) for plotting
            iplot += 1

    return ttplot                   

## Part 2

# Plotting 6.7:
nspace = 61
ntime = 10

# Comment here
# Another comment
tau = 1*10**-4
args = [1,1]
tsigma = (args[0]/(nspace-1))**2/(2)
tau_rel = tau/tsigma

tplot = [(i+1)*tau for i in range(nstep) if (i+1)%plot_step <1]
ttplot = diffusion_ftcs(nspace, ntime, tau_rel, args)
xplot = np.arange(nspace)*args[0]/(nspace-1) - args[0]/2.

# * Plot temperature versus x and t as a wire-mesh plot
# fig = plt.figure()
fig = plt.figure(figsize=plt.figaspect(0.4))
ax = fig.add_subplot(1, 2, 1, projection='3d')
Tp, Xp = np.meshgrid(tplot, xplot)
ax.plot_surface(Tp, Xp, np.array(ttplot), rstride=2, cstride=2, cmap=cm.gray)
ax.set_xlabel('Time')
ax.set_ylabel('x')
ax.set_zlabel('T(x,t)')
ax.set_title('Diffusion of a delta spike')
# plt.show()

#* Plot temperature versus x and t as a contour plot
ax = fig.add_subplot(1, 2, 2)
levels = np.linspace(0, 5., num=21) 
ct = plt.contour(tplot, xplot, ttplot, levels) 
ax.clabel(ct, levels[::2], fmt='%1.2f') 
ax.set_xlabel('Time')
ax.set_ylabel('x')
ax.set_title('Temperature contour plot')
plt.subplots_adjust(wspace = 0.5)
plt.show()

## Plotting 6.8:
nspace1 = 61
ntime1 = 10
tau_rel1 = 2
args1 = [1,1]  # L, k = 1, 1

ttplot1 = diffusion_ftcs(nspace1, ntime1, tau_rel1, args1)
xplot1 = np.arange(nspace1)*args1[0]/(nspace1-1) - args1[0]/2.

# * Plot temperature versus x and t as a wire-mesh plot
fig1 = plt.figure(figsize=plt.figaspect(0.4))
ax1 = fig1.add_subplot(1, 2, 1, projection='3d')
Tp1, Xp1 = np.meshgrid(tplot, xplot1)
ax1.plot_surface(Tp1, Xp1, np.array(ttplot1), rstride=2, cstride=2, cmap=cm.gray)
ax1.set_xlabel('Time')
ax1.set_ylabel('x')
ax1.set_zlabel('T(x,t)')
ax1.set_title('Diffusion of a delta spike')
# plt.show()

#* Plot temperature versus x and t as a contour plot
ax1 = fig1.add_subplot(1, 2, 2)
levels = np.linspace(0, 10., num=21) 
ct = plt.contour(tplot, xplot1, ttplot1, levels) 
ax1.clabel(ct, levels[::2], fmt='%1.2f') 
ax1.set_xlabel('Time')
ax1.set_ylabel('x')
ax1.set_title('Temperature contour plot')
plt.subplots_adjust(wspace = 0.5)
plt.show()